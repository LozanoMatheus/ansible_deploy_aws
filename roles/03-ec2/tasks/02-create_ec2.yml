- name: Creating the ec2
  ec2:
    state: present
    image: "{{ ami['id'] }}"
    region: "{{ aws_region }}"
    wait: yes
    assign_public_ip: yes
    key_name: "{{ ssh_key['file'] }}"
    instance_type: "{{ instance['type'] }}"
    group_id: "{{ security_group_ids }}"
    count: "{{ instance['count'] | int }}"
    monitoring: yes
    vpc_subnet_id: "{{ subnet['id'] }}"
    # user_data: "{{ lookup('file', bootstrap['path'] + bootstrap['countries']) }}"
    volumes:
      - device_name: "{{ volumes['device_name'] }}"
        # snapshot: "{{ volumes['volume_snapshot'] }}"
        volume_type: "{{ volumes['volume_type'] }}"
        volume_size: "{{ volumes['volume_size'] }}"
        delete_on_termination: "{{ volumes['delete_on_termination'] | bool }}"
    instance_tags:
      Owner: "{{ tags['owner'] }}"
      Mode: "manual"
  when: get_manual_instances|length == 0
  register: ec2_return

- name: Get all instances ids
  set_fact:
    instance_ids: "{{ instance_ids + ec2_return.instance_ids if instance_ids is defined else ec2_return.instance_ids }}"
  when: get_manual_instances|length == 0

- name: Get instances IPs
  set_fact:
    instances_private_ipv4: "{{ ec2_return | json_query('instances[*].private_ip') }}"
    instances_public_ipv4: "{{ ec2_return | json_query('instances[*].public_ip') }}"
  when: get_manual_instances|length == 0

- name: Creating var file with instances IDs
  template:
    src: instance_ids.j2
    dest: group_vars/all/tmp_instance_ids.yml
  when: get_manual_instances|length == 0

- name: Creating inventory file
  template:
    src: instance_public_ipv4.j2
    dest: hosts
  when: get_manual_instances|length == 0

- name: Instances Private ipv4
  debug: msg={{ instances_private_ipv4 }}
  when: instances_private_ipv4 is defined

- name: Instances Public ipv4
  debug: msg={{ instances_public_ipv4 }}
  when: instances_public_ipv4 is defined
